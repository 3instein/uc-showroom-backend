// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Customer {
  id             Int           @id @default(autoincrement())
  name           String
  address        String
  phone          String
  id_card_number String
  id_card_photo  String

  // Add the opposite relation fields for orders
  carOrders        CarOrder[]
  truckOrders      TruckOrder[]
  motorcycleOrders MotorcycleOrder[]
}

model Car {
  id             Int    @id @default(autoincrement())
  model          String
  year           Int
  seats          Int
  manufacturer   String
  price          Int
  fuel_type      String
  trunk_capacity Int

  // Add the opposite relation field for orders
  carOrders CarOrder[]
}

model Truck {
  id             Int    @id @default(autoincrement())
  model          String
  year           Int
  seats          Int
  manufacturer   String
  price          Int
  wheels         Int
  cargo_capacity Int

  // Add the opposite relation field for orders
  truckOrders TruckOrder[]
}

model Motorcycle {
  id             Int     @id @default(autoincrement())
  model          String
  year           Int
  seats          Int
  manufacturer   String
  price          Int
  trunk_capacity Int
  fuel_capacity  Int

  // Add the opposite relation field for orders
  motorcycleOrders MotorcycleOrder[]
}

model CarOrder {
  id         Int   @id @default(autoincrement())
  customer   Customer @relation(fields: [customerId], references: [id])
  customerId Int
  car        Car @relation(fields: [carId], references: [id])
  carId      Int
}

model TruckOrder {
  id         Int   @id @default(autoincrement())
  customer   Customer @relation(fields: [customerId], references: [id])
  customerId Int
  truck      Truck @relation(fields: [truckId], references: [id])
  truckId    Int
}

model MotorcycleOrder {
  id           Int   @id @default(autoincrement())
  customer     Customer @relation(fields: [customerId], references: [id])
  customerId   Int
  motorcycle   Motorcycle @relation(fields: [motorcycleId], references: [id])
  motorcycleId Int
}
